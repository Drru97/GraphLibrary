<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphLibrary</name>
    </assembly>
    <members>
        <member name="T:GraphLibrary.Source.FunctionOperations">
            <summary>
            Class which contains information about
            function and processing methods
            </summary>
        </member>
        <member name="P:GraphLibrary.Source.FunctionOperations.LeftLimit">
            <value> Minimum value of function </value>
        </member>
        <member name="P:GraphLibrary.Source.FunctionOperations.RightLimit">
            <value> Maximum value of function</value>
        </member>
        <member name="P:GraphLibrary.Source.FunctionOperations.NumberOfPoints">
            <value> Number of points which will be used in charting </value>
        </member>
        <member name="P:GraphLibrary.Source.FunctionOperations.X">
            <value> Array of function arguments x </value>
        </member>
        <member name="P:GraphLibrary.Source.FunctionOperations.Y">
            <value> Array of function values y </value>
        </member>
        <member name="P:GraphLibrary.Source.FunctionOperations.Function">
            <value> Sets mathematical function as a string </value>
        </member>
        <member name="M:GraphLibrary.Source.FunctionOperations.Tabulation(System.Double)">
            <summary>
            Method is used to get a function values y
            from function arguments x
            </summary>
            <param name="h"> Tabulation step </param>
        </member>
        <member name="M:GraphLibrary.Source.FunctionOperations.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:GraphLibrary.Source.FunctionOperations.#ctor(System.String)">
            <summary>
            Creates an instance of this class
            with preset mathematical function and
            default parameters and tabulate it
            </summary>
            <param name="function"> Mathematical function in string view </param>
        </member>
        <member name="M:GraphLibrary.Source.FunctionOperations.#ctor(System.String,System.Double)">
            <summary>
            Create an instance of this class
            with preset mathematical function, 
            tabulation step and tabulate it
            </summary>
            <param name="function"> Mathematical function in string view </param>
            <param name="step"> Tabulation step </param>
        </member>
        <member name="M:GraphLibrary.Source.FunctionOperations.#ctor(System.String,System.Int32)">
            <summary>
            Create an instance of this class
            with preset mathematical function
            and number of tabulation points
            </summary>
            <param name="function"> Mathematical function in string view </param>
            <param name="numberOfPoints"> Number of tabulation points </param>
        </member>
        <member name="M:GraphLibrary.Source.FunctionOperations.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Create an instance of this class
            with preset mathematical function, 
            left and right limits
            </summary>
            <param name="function"> Mathematical function in string view </param>
            <param name="leftLimit"> Minimum value of function argument </param>
            <param name="rightLimit"> Maximum value of function argument </param>
        </member>
        <member name="M:GraphLibrary.Source.FunctionOperations.#ctor(System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Create an instance of this class
            with preset mathematical function, 
            limits and number of tabulation points
            </summary>
            <param name="function"> Mathematical function in string view </param>
            <param name="leftLimit"> Minimum value of function argument </param>
            <param name="rightLimit"> Maximum value of function argument </param>
            <param name="numberOfPoints"> Number of points for tabulation </param>
        </member>
        <member name="M:GraphLibrary.Source.FunctionOperations.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Create an instance of this class
            with preset mathematical function,
            limits and tabulation step
            </summary>
            <param name="function"> Mathematical function in string view </param>
            <param name="leftLimit"> Minimum value of function argument </param>
            <param name="rightLimit"> Maximum value of function argument </param>
            <param name="step"> Tabulation step </param>
        </member>
        <member name="T:GraphLibrary.Source.FunctionReflection">
            <summary>
            This class is used to convert specifed as
            string functions into lambda expressions
            </summary>
        </member>
        <member name="P:GraphLibrary.Source.FunctionReflection.Function">
            <value> Sets functions as a string </value>
        </member>
        <member name="M:GraphLibrary.Source.FunctionReflection.#ctor(System.String)">
            <summary>
            Creates an instance of this class
            with specified comliler parameters
            </summary>
            <param name="function"> Mathematical function in string view </param>
        </member>
        <member name="M:GraphLibrary.Source.FunctionReflection.Compile">
            <summary>
            This method is used to compile source code
            from strings with specified parameters
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"> Throws when 
            given incorrect function and compiler cannot compile assembly</exception>
        </member>
        <member name="M:GraphLibrary.Source.FunctionReflection.InvokeMethod(System.Double)">
            <summary>
            This method is used to dynamic invoke lambda
            expression as a result of compilation
            </summary>
            <param name="x"> Function argument x </param>
            <returns> Function value y </returns>
            <exception cref="T:System.ArgumentNullException"> Throws when
            given incorrect function </exception>
        </member>
        <member name="T:GraphLibrary.Source.WindowsOperations">
            <summary>
            Class which contains methods
            for drawing charts
            </summary>
        </member>
        <member name="M:GraphLibrary.Source.WindowsOperations.Draw(System.String)">
            <summary>
            Method which draw function graph
            preset by mathematical expression
            </summary>
            <param name="function"> Mathematical expression as string </param>
        </member>
        <member name="M:GraphLibrary.Source.WindowsOperations.Draw(System.String,System.Double,System.Double)">
            <summary>
            Method which draw function graph
            preset by mathematical expression
            and its limits
            </summary>
            <param name="function"> Mathematical expression as string </param>
            <param name="leftLimit"> Minimum of argument x </param>
            <param name="rightLimit"> Maximum of argument x </param>
        </member>
        <member name="M:GraphLibrary.Source.WindowsOperations.Draw(System.String,System.Double)">
            <summary>
            Method which draw function graph
            preset by mathematical expression
            and tabulation step
            </summary>
            <param name="function"> Mathematical expression as string </param>
            <param name="step"> Tabulation step </param>
        </member>
        <member name="M:GraphLibrary.Source.WindowsOperations.Draw(System.String,System.Int32)">
            <summary>
            Method which draw function graph
            preset by mathematical expression
            and number of points
            </summary>
            <param name="function"> Mathematical expression as string </param>
            <param name="numberOfPoints"> Number of points which will be used in charting </param>
        </member>
        <member name="M:GraphLibrary.Source.WindowsOperations.Draw(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Method which draw function graph
            preset by mathematical expression,
            limits and tabulation step
            </summary>
            <param name="function"> Mathematical expression as string </param>
            <param name="leftLimit"> Minimum of argument x </param>
            <param name="rightLimit"> Maximum of argument x </param>
            <param name="step"> Tabulation step </param>
        </member>
        <member name="M:GraphLibrary.Source.WindowsOperations.Draw(System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Method which draw function graph
            preset by mathematical expression
            and number of points
            </summary>
            <param name="function"> Mathematical expression as string </param>
            <param name="leftLimit"> Minimum of argument x </param>
            <param name="rightLimit"> Maximum of argument x </param>
            <param name="numberOfPoints"> Number of points which will be used in charting </param>
        </member>
        <member name="M:GraphLibrary.Source.WindowsOperations.Draw(System.Double[],System.Object[])">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:GraphLibrary.Source.WindowsOperations.CreateWindow">
            <summary>
            This method creates Windows Form and 
            Chart, adds new Series and Chart Area
            and plots
            </summary>
        </member>
    </members>
</doc>
